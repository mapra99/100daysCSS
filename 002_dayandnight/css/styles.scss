// delete the following line if no text is used
// edit the line if you wanna use other fonts
body {
  margin: 0;
  padding: 0;
}

.frame {
  background-color: #272C34;
  width: 400px;
  height: 400px;
  border-radius: 2px;
  box-shadow: 4px 8px 16px 0 rgba(0,0,0,0.1);
  overflow: hidden;
  color: #333;
  font-family: 'Open Sans', Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: flex;
  justify-content: center;
  align-items: center;
}

.center {
  width: 200px;
  height: 200px;
  border-radius: 50%;
  background-color: blue;
  z-index: 10;
}

//Initial Colors
$colors: (
  left_piramid: #f9ffa8,
  right_piramid: #dbdccb,
  shadow: #b38a1c,
  background: #272c34
);

//Initial Paths
$path_shadow: (
    point1_x: 43.299012,
     point1_y: 278.34686,
     point2_x: 58.20833,
     point2_y: 279.80208,
     point3_x: 8.4224043,
     point3_y: 278.34686
);
 $shadow_full_path: "M #{map-get($path_shadow, point1_x)},#{map-get($path_shadow, point1_y)}
 #{map-get($path_shadow, point2_x)},#{map-get($path_shadow, point2_y)}
 #{map-get($path_shadow, point3_x)},#{map-get($path_shadow, point3_y)} Z";

$path_sun: (
  cx: -5.2916665,
  cy: 278.34683
);

//Setting initial Values
.left-piramid {fill: map-get($colors, left_piramid);}
.right-piramid {fill: map-get($colors, right_piramid);}
.shadow {fill: map-get($colors, shadow);}
.background {fill: map-get($colors, background);}

.sun {
  cx: map-get($path_sun, cx);
  cy: map-get($path_sun, cy);
}

.shadow {
  d: path($shadow_full_path);
}

//Calculation of Sun trajectory parameters
$d: 52.916665/2 - map-get($path_sun, cx);
$h: 34.26354 - 17.636/2;
$r: ($d*$d + $h*$h)/2/$h;
$m: $r - 52.916665/2;

@function pi() {
  @return 3.14159265359;
}
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}
@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}

@keyframes sun_move {
  $theta: 0;
  $perc: 0;
  $x_actual: $r*cos($theta);
  $y_actual: $r*sin($theta) - $m;
  0%{
    transform: translate($x_actual - map-get($path_sun,cx),$y_actual - map-get($path_sun,cy));
  }
  $theta: 36;
  $perc: 1/(360/36)*100;
  @while $theta <= 360 {
    $x_nuevo: $r*cos($theta);
    $y_nuevo: $r*sin($theta) - $m;
    #{$perc}% {
      transform: translate($x_nuevo - $x_actual, $y_nuevo - $y_actual);
    }
    $x_actual: $x_nuevo;
    $y_actual: $y_nuevo;
    $theta: $theta + 36;
    $perc: $perc + 1/(360/36)*100;
  }
}

.sun{
  animation: sun_move 10s infinite;
}
